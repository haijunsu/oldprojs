/**
 * @(#)XMLConfigure.java  2003-1-14
 * 
 * Copyright (c) Beijing IDN Systems Integration Co., Ltd. 2003 
 * All rights reserved. 
 */

package com.idn.property;

import java.io.*;
import java.util.Properties;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

/**
 * <P>读取系统XML配置文件信息，XML文档格式如下：</P>
 * <CODE>
 * <?xml version="1.0" encoding="GB2312"?>
 * <properties>
 *     <prop>
 *         <name>server.type</name>
 *         <value>Tomcat</value>
 *         <description>服务器类型：Tomcat-服务器、WebSphere-服务器</description>
 *     </prop>
 * </properties>
 * </CODE>
 * 注意：目前仅可以在WebSphere服务器上测试通过
 * 
 * @version 0.1
 * @author 苏海军
 */
public class XMLConfigure extends DefaultHandler {
	/**
	 * 系统属性，通过getProperties来获得
	 */
	private static Properties properties = new Properties();

	/**
	 * 记录XML标签堆栈
	 */
	private static java.util.Stack tagStack = new java.util.Stack();
	

	/**
	 * XML文档元素标签
	 */
	private final String m_strProp = "prop";

	/**
	 * XML文档标签name内容
	 */
	private String m_strPropName = null;

	/**
	 * XML文档标签value内容
	 */
	private String m_strPropValue = null;

	/**
	 * XML文档标签description内容
	 */
	private String m_strPropDesc = null;
	
	/**
	 * 构造XMLConfigure
	 */
	public XMLConfigure() {
		super();
	}

	/**
	 * 读取XML信息并给properties赋值
	 */
	private void readXML(String filename) {

		// Use an instance of ourselves as the SAX event handler
		DefaultHandler handler = new XMLConfigure();
		// Use the validating parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		factory.setValidating(true);
		//factory.setNamespaceAware(true);
		try {
			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(new File(filename), handler);

		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println(
				"\n** Parsing error"
					+ ", line "
					+ spe.getLineNumber()
					+ ", uri "
					+ spe.getSystemId());
			System.out.println("   " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();

		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();

		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}
	}

	//===========================================================
	// SAX DocumentHandler methods
	//===========================================================

	public void setDocumentLocator(Locator l) {
		// Ignore it
	}

	public void startDocument() throws SAXException {
		// Ignore it
	}

	public void endDocument() throws SAXException {
		// Ignore it
	}

	public void startElement(
		String namespaceURI,
		String lName,
		String qName,
		Attributes attrs)
		throws SAXException {
		// 将标签名称压入堆栈
		tagStack.push(qName);
	}

	public void endElement(String namespaceURI, String sName, String qName)
		throws SAXException {
		// 收集内容完成，将标签移出，并给相应的属性赋值
		tagStack.pop();
		if (qName.equals(m_strProp)) {
			properties.setProperty(m_strPropName, m_strPropValue);
			properties.setProperty(m_strPropName + "_desc", m_strPropDesc);
		}
	}

	public void characters(char buf[], int offset, int len)
		throws SAXException {
		//处理XML文档内容
		String tag=(String) tagStack.peek();
		if (tag.equals("name")) m_strPropName = new String(buf, offset, len);
		else if (tag.equals("value")) m_strPropValue = new String(buf, offset, len);
		else if (tag.equals("description")) m_strPropDesc = new String(buf, offset, len);

	}

	public void ignorableWhitespace(char buf[], int offset, int len)
		throws SAXException {
		// Ignore it
	}

	public void processingInstruction(String target, String data)
		throws SAXException {
		// Ignore it
	}

	//===========================================================
	// SAX ErrorHandler methods
	//===========================================================

	// treat validation errors as fatal
	public void error(SAXParseException e) throws SAXParseException {
		throw e;
	}

	// dump warnings too
	public void warning(SAXParseException err) throws SAXParseException {
		System.out.println(
			"** Warning"
				+ ", line "
				+ err.getLineNumber()
				+ ", uri "
				+ err.getSystemId());
		System.out.println("   " + err.getMessage());
	}
	
	/**
	 * 获取系统属性
	 */
	public Properties XMLToProperties(String filename) {
		readXML(filename);
		return properties;
	}
	
}
