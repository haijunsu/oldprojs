<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/index.xsl"?>
<doc>
	<!-- 定义页面属性 -->
    <isindexpage>false</isindexpage>
	<isindexall>false</isindexall>
	<indexfile>indexall.xml</indexfile>

	<!-- 定义文档位置 -->
	<topic>java</topic>
	<catalog>tips</catalog>

	<!-- 文档显示内容 -->
    <title>使用commons-logging来统一Java日志记录</title>
    <pagename>使用commons-logging来统一Java日志记录</pagename>
	<content><![CDATA[
      <!-- 在这里写入HTML代码内容 -->
在Java的开发过程中，发现有许多Log Api来帮助开发人员记录日志，从而替代Java中的
<i>System.out.println()</i>，其中最具代表的就是<b>log4j</b>。而在J2SE 1.4的版本
中，Java本身又提供了一个Logging API。commons-logging充当了一个桥梁的作用，使开发
人员很方便的切换日志记录使用的API，同时其本身也提供了一个简单的日志记录功能。

<h3>Java Logging API</h3>
<div id="refer">具体内容可参考<a href="http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/index.html">Java Logging APIs</a></div>
J2SE 提供了如下日志记录控制机制： <br>
<ul><li>
StreamHandler</li><li>
ConsoleHandler</li><li>
FileHandler</li><li>
SocketHandler</li><li>
MemoryHandler
</li></ul>
同时提供了两种格式化类：SimpleFormatter、XMLFormatter<br>
七种记录级别包括SEVERE、WARNING、INFO、CONFIG、FINE、FINER和FINEST。<br>
其配置文件位于JAVA_HOME\jre\lib\logging.properties。<br>
可以通过程序动态加载配置信息、添加或删除日志记录控制机制。如：
<div id="codeblock">
<code>
public static void main(String[] args){<br>
    Handler fh = new FileHandler("%t/wombat.log");<br>
    Logger.getLogger("").addHandler(fh);<br>
    Logger.getLogger("com.wombat").setLevel("com.wombat",Level.FINEST);<br>
    ...<br>
}
</code>
</div>
也可以使用JVM参数来选择指定的配置文件：
<div id="codeblock">
<code>
java -Djava.util.logging.config.file=YourPropsFile SimpleLogging
</code>
</div>
通过程序选择指定的配置文件
<div id="codeblock">
<code>
LogManager.getLogManager().readConfiguration(new FileInputStream("/java/logging.properties")); 
</code>
</div>
使用方法：
<div id="codeblock">
<code>
java.util.logging.Logger logger= java.util.logging.Logger.getLogger("com.navy.LogTest") 
</code>
</div>

<h3>Log4j</h3>
<div id="refer">具体内容可参考<a href="http://logging.apache.org/log4j/docs/index.html">Log4j project</a></div>

Log4j是Apache的一个开放源代码项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、
GUI组件、甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输
出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，
这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。<br>
<br>
此外，通过Log4j其他语言接口，您可以在C、C++、.Net、PL/SQL程序中使用Log4j，其语法和用法与在Java程
序中一样，使得多语言分布式系统得到一个统一一致的日志组件模块。而且，通过使用各种第三方扩展，您可
以很方便地将Log4j集成到J2EE、JINI甚至是SNMP应用中。<br><br>
Log4j由三个重要的组件构成：日志信息的优先级，日志信息的输出目的地，日志信息的输出格式。日志信息的
优先级从高到低有ERROR、WARN、INFO、DEBUG，分别用来指定这条日志信息的重要程度；日志信息的输出目的
地指定了日志将打印到控制台还是文件中；而输出格式则控制了日志信息的显示内容。<br>
Log4j提供的appender有以下几种：
<ul><li>
org.apache.log4j.ConsoleAppender（控制台）</li><li>
org.apache.log4j.FileAppender（文件）</li><li>
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
</li></ul>
Log4j提供的layout有以下几种：
<ul><li>
org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>
org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>
org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>
org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
</li></ul>
<h3>使用commons-logging API</h3>
commons-logging API 在运行的时候它会先在CLASSPATH找log4j，如果有，就使用log4j，
如果没有，就找JDK1.4带的java.util.logging，如果也找不到就用Simple Logger。
commons-logging.jar的出现是一个历史的的遗留的遗憾，当初Apache极力游说Sun把log4j
加入JDK1.4，然而JDK1.4项目小组已经接近发布JDK1.4产品的时间了，
因此拒绝了Apache的要求，使用自己的java.util.logging，这个包的功能比log4j差的很远，
性能也一般。后来Apache就开发出来了commons-logging.jar用来兼容两个logger。
因此用commons-logging.jar写的log程序，底层的Logger是可以切换的，你可以选择log4j，
java.util.logging或者它自带的Simple Logger。强烈建议使用log4j，
因为log4j性能很高，log输出信息时间几乎等于System.out，而处理一条log平均只需要5us。<br><br>

建立commons-logging.properties文件(如果让commons-logging API自动选择日志记录类型，可不建立此文件)：
<div id="codeblock">
<pre>
# 
#org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactoryImpl
# SimpleLog
#org.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog
# JDK 1.4 logger
#org.apache.commons.logging.Log=org.apache.commons.logging.impl.Jdk14Logger
# Avalon Toolkit
#org.apache.commons.logging.Log=org.apache.commons.logging.impl.LogKitLogger
# Log4j
#org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger
</pre>
</div>

建立simplelog.properties文件，此文件在找不到Log4j和Jdk14时，会使用SimpleLog。
<div id="codeblock">
<pre>
# Default logging detail level for all instances of SimpleLog. Must be one of 
# ("trace", "debug", "info", "warn", "error", or "fatal"). If not specified, 
# defaults to "info".
org.apache.commons.logging.simplelog.defaultlog=warn
	
# Logging detail level for a SimpleLog instance named "xxxxx". Must be one of 
# ("trace", "debug", "info", "warn", "error", or "fatal"). If not specified, the 
# default logging detail level is used.
org.apache.commons.logging.simplelog.log.navy=debug

# Set to true if you want the Log instance name to be included in output 
# messages. Defaults to false.
org.apache.commons.logging.simplelog.showlogname=true

# Set to true if you want the last componet of the name to be included in 
# output messages. Defaults to true.
org.apache.commons.logging.simplelog.showShortLogname=false
	
# Set to true if you want the current date and time to be included in output 
# messages. Default is false.
org.apache.commons.logging.simplelog.showdatetime=true

# Set Dateformat
org.apache.commons.logging.simplelog.dateformat=[yyyy-MM-dd HH:mm:ss zzz]
</pre>
</div>

如果要强制使用某种日志记录方法，将commons-logging.properties文件中对应的
org.apache.commons.logging.Log前面的＃号去掉即可。

<p>       ]]> </content>

</doc>

